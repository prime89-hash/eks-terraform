name: Deploy 3-Tier Web Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.5.0
  JAVA_VERSION: '17'

permissions:
  contents: read
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Run tests
        working-directory: ./app
        run: ./gradlew test --no-daemon
      
      - name: Build application
        working-directory: ./app
        run: ./gradlew build --no-daemon

  terraform-plan:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write
    outputs:
      tfplan: ${{ steps.plan.outputs.tfplan }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        run: |
          if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            terraform plan -destroy -var="environment=prod" -out=tfplan
          else
            terraform plan -var="environment=prod" -out=tfplan
          fi
          echo "tfplan=tfplan" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event.inputs.action != 'destroy'
    permissions:
      contents: read
      id-token: write
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        id: build
        working-directory: ./app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: webapp-3tier-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [terraform-plan, build-and-push]
    if: github.ref == 'refs/heads/main' && github.event.inputs.action != 'destroy'
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="environment=prod"

  deploy-application:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push]
    if: github.ref == 'refs/heads/main' && github.event.inputs.action != 'destroy'
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name webapp-3tier-cluster
      
      - name: Get AWS Account ID
        id: account
        run: echo "account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT
      
      - name: Get RDS Endpoint
        id: rds
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier webapp-3tier-db --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "rds-endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
      
      - name: Update Kubernetes manifests
        run: |
          # Update deployment with correct image URI
          sed -i "s|ACCOUNT_ID|${{ steps.account.outputs.account-id }}|g" k8s/deployment.yaml
          
          # Update secrets with RDS endpoint
          RDS_ENDPOINT_B64=$(echo -n "${{ steps.rds.outputs.rds-endpoint }}" | base64 -w 0)
          sed -i "s|db-host: # Base64 encoded RDS endpoint|db-host: $RDS_ENDPOINT_B64|g" k8s/deployment.yaml
          
          # Update service account with correct role ARN
          sed -i "s|ACCOUNT_ID|${{ steps.account.outputs.account-id }}|g" k8s/deployment.yaml
      
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/webapp-3tier -n webapp --timeout=300s

  destroy:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event.inputs.action == 'destroy'
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var="environment=prod"
