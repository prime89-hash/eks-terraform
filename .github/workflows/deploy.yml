name: Deploy 3-Tier Web Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.5.0
  JAVA_VERSION: '17'

permissions:
  contents: read
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Run tests
        working-directory: ./app
        run: ./gradlew test --no-daemon
      
      - name: Build application
        working-directory: ./app
        run: ./gradlew build --no-daemon

  terraform-plan:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write
    outputs:
      tfplan: ${{ steps.plan.outputs.tfplan }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        run: |
          if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            terraform plan -destroy -var="environment=prod" -out=tfplan
          else
            terraform plan -var="environment=prod" -out=tfplan
          fi
          echo "tfplan=tfplan" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [test, terraform-plan]
    if: github.ref == 'refs/heads/main' && github.event.inputs.action != 'destroy'
    permissions:
      contents: read
      id-token: write
    outputs:
      ecr-repository: ${{ steps.outputs.outputs.ecr-repository }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="environment=prod"
      
      - name: Get Terraform Outputs
        id: outputs
        run: |
          ECR_REPO=$(terraform output -raw ecr_repository_url)
          echo "ecr-repository=$ECR_REPO" >> $GITHUB_OUTPUT
          echo "ECR Repository: $ECR_REPO"

  build-and-push:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' && github.event.inputs.action != 'destroy'
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        working-directory: ./app
        env:
          ECR_REPOSITORY: ${{ needs.deploy-infrastructure.outputs.ecr-repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building image for repository: $ECR_REPOSITORY"
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest
          docker push $ECR_REPOSITORY:latest
          echo "Image pushed: $ECR_REPOSITORY:$IMAGE_TAG"

  deploy-application:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push]
    if: github.ref == 'refs/heads/main' && github.event.inputs.action != 'destroy'
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name webapp-3tier-cluster
      
      - name: Get deployment values
        id: values
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier webapp-3tier-db --query 'DBInstances[0].Endpoint.Address' --output text)
          CERTIFICATE_ARN=$(aws acm list-certificates --query 'CertificateSummaryList[?DomainName==`example.com`].CertificateArn' --output text)
          ALB_SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=webapp-3tier-alb-*" --query 'SecurityGroups[0].GroupId' --output text)
          PUBLIC_SUBNETS=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=webapp-3tier-vpc-public-*" --query 'Subnets[].SubnetId' --output text | tr '\t' ',')
          
          echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "rds-endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "certificate-arn=$CERTIFICATE_ARN" >> $GITHUB_OUTPUT
          echo "alb-sg-id=$ALB_SG_ID" >> $GITHUB_OUTPUT
          echo "public-subnets=$PUBLIC_SUBNETS" >> $GITHUB_OUTPUT
      
      - name: Create Kubernetes secret
        run: |
          # Create database secret
          kubectl create secret generic webapp-secrets -n webapp \
            --from-literal=db-host="${{ steps.values.outputs.rds-endpoint }}" \
            --from-literal=db-name="webapp" \
            --from-literal=db-username="webapp_user" \
            --from-literal=db-password="YourSecurePassword123!" \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Deploy with Helm
        run: |
          # Install/upgrade the application using Helm
          helm upgrade --install webapp-3tier ./helm/webapp-3tier \
            --namespace webapp \
            --create-namespace \
            --set image.repository="${{ needs.deploy-infrastructure.outputs.ecr-repository }}" \
            --set image.tag="${{ github.sha }}" \
            --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="arn:aws:iam::${{ steps.values.outputs.account-id }}:role/webapp-3tier-pod-role" \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"="${{ steps.values.outputs.certificate-arn }}" \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/security-groups"="${{ steps.values.outputs.alb-sg-id }}" \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/subnets"="${{ steps.values.outputs.public-subnets }}" \
            --wait --timeout=300s
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/webapp-3tier -n webapp --timeout=300s
      
      - name: Get application URL
        run: |
          echo "Waiting for ALB to be ready..."
          sleep 60
          ALB_DNS=$(kubectl get ingress webapp-ingress -n webapp -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "ALB not ready yet")
          echo "Application URL: https://$ALB_DNS"
          echo "Health Check: https://$ALB_DNS/health"

  destroy:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event.inputs.action == 'destroy'
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var="environment=prod"
